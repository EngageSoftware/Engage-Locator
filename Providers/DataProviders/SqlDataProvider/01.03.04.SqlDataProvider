IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE [Name] = 'Address2' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Location]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Location] ADD [Address2] nvarchar(510) NULL
GO

IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE [Name] = 'Address2' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_TempLocation]'))
	ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_TempLocation] ADD [Address2] nvarchar(510) NULL
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') AND OBJECTPROPERTY(id, N'IsView') = 1)
DROP VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, 
		country.Text AS CountryName, l.City, l.Address, l.Address2, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId, l.Approved, l.RegionId,
		(select avg(convert(FLOAT, Rating)) from {databaseOwner}[{objectQualifier}EngageLocator_Rating] where itemVersionId = l.locationId) as AverageRating
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] country on (country.EntryId = l.CountryId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] region on (region.EntryId = l.RegionId)

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@RegionId int,
	@CountryId int,
	@City nvarchar(510),
	@Address nvarchar(510),
	@Address2 nvarchar(510),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS

	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Location] (ExternalIdentifier, Name, Website, Latitude, Longitude, CountryId, RegionId, City, Address, Address2, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CsvLineNumber, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @Address2, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, @PortalId, getdate(), 0, @approved)
	
	SELECT @@Identity
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(510),
	@Address nvarchar(510),
	@Address2 nvarchar(510),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@successful varchar(25),
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_TempLocation] (ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, [Address], [Address2], PostalCode, Phone, LocationDetails, LocationTypeId, LastUpdatedDate, CsvLineNumber, PortalId, Successful, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @Address2, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, getdate(), @CsvLineNumber, @PortalId, @successful, @approved)
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
	@LocationId int,
	@ExternalIdentifier nvarchar(255),
	@LocationTypeId int,
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(510),
	@Address nvarchar(510),
	@Address2 nvarchar(510),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@PortalId int,
	@LastUpdatedDate datetime,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Location]
	SET 
		ExternalIdentifier = @ExternalIdentifier, 
		[Name] = @Name, 
		Website = @Website, 
		Latitude = @Latitude, 
		Longitude = @Longitude, 
		CountryId = @CountryId, 
		RegionId = @RegionId, 
		City = @City, 
		Address = @Address, 
		Address2 = @Address2,
		PostalCode = @PostalCode, 
		Phone = @Phone, 
		LocationDetails = @LocationDetails, 
		LocationTypeId = @LocationTypeId, 
		PortalId = @PortalId, 
		LastUpdatedDate = getdate(), 
		CsvLineNumber = 0, 
		approved = @approved
	WHERE 
		LocationId = @LocationId		
GO

--no longer needed
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
	@PortalId int,
	@approved bit,
	@sortColumn nvarchar(200), 
	@index int, 
	@pageSize int
	
AS

	CREATE TABLE #results 
	(
		Id int NOT NULL IDENTITY(1,1),
		LocationId int,
		TotalRecords int
	)

	EXEC('INSERT INTO #results ([LocationId]) SELECT LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_vLocations] WHERE PortalId = ' + @PortalID + ' AND Approved = ' + @approved + ' ORDER BY ' + @sortColumn)

	DECLARE @rows int
	SET @rows = @@RowCount

	UPDATE #results SET TotalRecords = @rows

	IF (@PageSize = 0)
		BEGIN
	 		SELECT r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName AS Country, CountryId, RegionId, City, Address, Address2, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			FROM #results r
			JOIN {databaseOwner}[{objectQualifier}EngageLocator_vLocations] e ON (r.LocationId = e.LocationId)
	 	END
	ELSE
	 	BEGIN
	 		SELECT r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName AS Country, CountryId, RegionId, City, Address, Address2, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			FROM #results r
			JOIN {databaseOwner}[{objectQualifier}EngageLocator_vLocations] e ON (r.LocationId = e.LocationId)
	 		WHERE id >= @index * @PageSize + 1
	 			AND id < @index * @PageSize + @PageSize + 1
	 	END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Location] (ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, Address, Address2, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CSVLineNumber, Approved)
	SELECT ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, Address, Address2, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CSVLineNumber, Approved
	FROM {databaseOwner}[{objectQualifier}EngageLocator_TempLocation]
GO
