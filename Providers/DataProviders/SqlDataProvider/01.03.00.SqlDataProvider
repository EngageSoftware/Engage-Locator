
if not exists (select * from dbo.syscolumns where name = 'Approved' and id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Location]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Location]
 ADD Approved bit
GO

UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Location] set Approved = 1
GO

if not exists (select * from dbo.syscolumns where name = 'Approved' and id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_TempLocation]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_TempLocation]
 ADD Approved bit
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]
	@portalId int
AS
	select 
		t.Title, tm.TabId, m.ModuleTitle, tm.ModuleId 
	from {databaseOwner}[{objectQualifier}TabModules] tm 
		join {databaseOwner}[{objectQualifier}Modules] m on (tm.ModuleId = m.ModuleId)
		join {databaseOwner}[{objectQualifier}ModuleDefinitions] md on (m.ModuleDefId = md.ModuleDefId)
		join {databaseOwner}[{objectQualifier}Tabs] t on (tm.TabId = t.TabId)
	where 
		t.PortalId = @portalId
		and m.IsDeleted = 0
		and t.IsDeleted = 0
		and t.IsVisible = 1
		and md.FriendlyName = 'EngageLocator'
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@RegionId int,
	@CountryId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails nvarchar(255),
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS

	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Location] (ExternalIdentifier, Name, Website, Latitude, Longitude, CountryId, RegionId, City, Address, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CsvLineNumber, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, @PortalId, getdate(), 0, @approved)
	
	select @@Identity
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
GO

CREATE  PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails nvarchar(255),
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@successful varchar(25),
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 
AS
	Insert into {databaseOwner}[{objectQualifier}EngageLocator_TempLocation] (ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, [Address], PostalCode, Phone, LocationDetails, LocationTypeId, LastUpdatedDate, CsvLineNumber, PortalId, Successful, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, getdate(), @CsvLineNumber, @PortalId, @successful, @approved)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
AS
INSERT INTO 
	{databaseOwner}[{objectQualifier}EngageLocator_Location] (
	ExternalIdentifier,
	[Name],
	Website,
	Latitude,
	Longitude,
	CountryId,
	RegionId,
	City,
	Address,
	PostalCode,
	Phone,
	LocationDetails,
	LocationTypeId,
	PortalId,
	LastUpdatedDate,
	CSVLineNumber,
	Approved
	)
SELECT 
	ExternalIdentifier,
    [Name],
	Website,
	Latitude,
	Longitude,
	CountryId,
	RegionId,
	City,
	Address,
	PostalCode,
	Phone,
	LocationDetails,
	LocationTypeId,
	PortalId,
	LastUpdatedDate,
	CSVLineNumber,
	Approved
FROM 
	{databaseOwner}[{objectQualifier}EngageLocator_TempLocation]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, l.RegionId, 
		country.Text AS CountryName, l.City, l.Address, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	left JOIN {databaseOwner}[{objectQualifier}lists] country on (country.EntryId = l.CountryId)
	left JOIN {databaseOwner}[{objectQualifier}lists] region on (region.EntryId = l.RegionId)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
	@locationId int
AS
	SELECT 
			LocationId, ExternalIdentifier, l.[Name], Latitude, Longitude, City, (select [Text] from Lists where EntryId = l.RegionId) as StateName, l.RegionId, Address, Phone, 
			LocationDetails, LocationTypeId, PostalCode, Website, LocationDetails, Approved
		FROM 
			{databaseOwner}[{objectQualifier}EngageLocator_Location] l  
		WHERE 
			LocationId = @locationId 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, 
		country.Text AS CountryName, l.City, l.Address, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId, l.Approved, l.RegionId
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	left JOIN {databaseOwner}[{objectQualifier}lists] country on (country.EntryId = l.CountryId)
	left JOIN {databaseOwner}[{objectQualifier}lists] region on (region.EntryId = l.RegionId)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]
	@LocationTypeId int
AS

	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.LocationTypeId = @LocationTypeId
	ORDER BY lta.ViewOrder 
	
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
	@PortalId int,
	@approved bit,
	@sortColumn nvarchar(200), 
	@index int, 
	@pageSize int
AS

	Create table #results 
	(
		[Id] int not null IDENTITY(1,1),
		[LocationId] [int],
		[TotalRecords] int
	)

    INSERT INTO #results ([LocationId])
    SELECT LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
    WHERE PortalId = @portalId
		AND Approved =  @approved
		ORDER BY @sortColumn

	DECLARE @rows int
	set @rows = @@RowCount

	update #results set TotalRecords = @rows

	if (@PageSize = 0)
		BEGIN
	 		select r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName as Country, CountryId, RegionId, City, Address, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			from #results r
			join EngageLocator_vLocations e on (r.LocationId = e.LocationId)
	 	END
	ELSE
	 	BEGIN
	 		select r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName as Country, CountryId, RegionId, City, Address, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			from #results r
			join EngageLocator_vLocations e on (r.LocationId = e.LocationId)
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
	@LocationId int,
	@ExternalIdentifier nvarchar(255),
	@LocationTypeId int,
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails nvarchar(255),
	@PortalId int,
	@LastUpdatedDate datetime,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS
	Update {databaseOwner}[{objectQualifier}EngageLocator_Location]
	SET 
		ExternalIdentifier = @ExternalIdentifier, 
		[Name] = @Name, 
		Website = @Website, 
		Latitude = @Latitude, 
		Longitude = @Longitude, 
		CountryId = @CountryId, 
		RegionId = @RegionId, 
		City = @City, 
		Address = @Address, 
		PostalCode = @PostalCode, 
		Phone = @Phone, 
		LocationDetails = @LocationDetails, 
		LocationTypeId = @LocationTypeId, 
		PortalId = @PortalId, 
		LastUpdatedDate = getdate(), 
		CsvLineNumber = 0, 
		approved = @approved
	WHERE 
		LocationId = @LocationId		
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationType]') AND type in (N'U'))
if not exists (select * from dbo.syscolumns where name = 'PortalId' and id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationType]
ADD [PortalID] [int] NULL
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocTypeAttributes]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocTypeAttributes]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
GO

IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]') AND name = N'PK_{objectQualifier}EngageLocator_AttributeDefinition')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_AttributeDefinition]
go

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition](
	[AttributeDefinitionId] [int] IDENTITY(1,1) NOT NULL,
	[LocationTypeId] [int] NOT NULL,
	[AttributeName] [nvarchar](255),
	[DataType] [int] NULL,
	[Length] [int] NULL,
	[DefaultValue] [nvarchar](255),
	[ValidationExpression] [nvarchar],
	[Required] [bit] NOT NULL,
	[ViewOrder] [int] NOT NULL,
	[Visible] [bit] NOT NULL
)

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] WITH NOCHECK ADD 
	CONSTRAINT [PK_{objectQualifier}EngageLocator_AttributeDefinition] PRIMARY KEY  CLUSTERED 
	(
		[AttributeDefinitionId]
	)  ON [PRIMARY] 
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_AttributeDefinition_{objectQualifier}EngageLocator_LocationType] FOREIGN KEY 
	(
		[LocationTypeId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_LocationType] (
		[LocationTypeId]
	)
GO



IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationAttributes]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttributes]
GO



if exists (select * from dbo.sysobjects where id = object_id(N'FK_{objectQualifier}EngageLocator_Comments_{objectQualifier}EngageLocator_Location') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments] DROP CONSTRAINT FK_{objectQualifier}EngageLocator_Comments_{objectQualifier}EngageLocator_Location
GO

if exists (select * from dbo.sysobjects where id = object_id(N'FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] DROP CONSTRAINT FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comment]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationComments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationComments]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment](
	[CommentId] [int] IDENTITY(1,1) NOT NULL,
	[LocationId] [int] NOT NULL,
	[Text] [nvarchar](200) NOT NULL,
	[Author] [nvarchar](50) NULL,
	[CreateDate] [datetime] NOT NULL,
	[Approved] [bit] NOT NULL,
	[ApprovedByUser] [int] NULL,
	[ApprovalDate] [datetime] NULL
) 

IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND name = N'PK_{objectQualifier}EngageLocator_LocationComments')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationComments] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_LocationComments]
go

IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND name = N'PK_{objectQualifier}EngageLocator_LocationComments')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_Comments]
go

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] WITH NOCHECK ADD 
	CONSTRAINT [PK_{objectQualifier}EngageLocator_Comment] PRIMARY KEY  CLUSTERED 
	(
		[CommentId]
	)  ON [PRIMARY] 
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location] FOREIGN KEY 
	(
		[LocationId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_Location] (
		[LocationId]
	)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]
	@commentId int,
	@text nvarchar(255),
	@submittedBy nvarchar(50),
	@approved bit
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Comment]
	SET Text = @text, Author = @submittedBy, Approved = @approved
	WHERE CommentId = @commentId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateComment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateComment]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateComment]
	@locationId int,
	@text varchar(200),
	@submittedBy varchar(50),
	@approved bit,
	@userId int
AS
	Update 
		{databaseOwner}[{objectQualifier}EngageLocator_Comment]
	Set 
		[Text] = @text, 
		Author = @submittedBy, 
		CreateDate = getdate(), 
		Approved = @approved, 
		ApprovalDate = getdate()	
	Where 
		LocationId = @locationId 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetComments]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetComments]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetComments]
	@locationId int,
	@approved bit
AS
	SELECT lc.CommentId, lc.Text, lc.Author, l.[Name], lc.ApprovalDate
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc
		join {databaseOwner}[{objectQualifier}EngageLocator_Location] l on (lc.LocationId = l.LocationId)
	where lc.LocationId = @locationId and lc.Approved = @approved
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]
	@portalId int,
	@approved bit
AS
	SELECT lc.CommentId, lc.LocationId, lc.Text, lc.Author, lc.Approved, l.[Name], lc.CreateDate
	FROM 
		{databaseOwner}[{objectQualifier}EngageLocator_Location] l
		join {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc on (l.LocationId = lc.LocationId)
	WHERE 
		PortalId = @portalId
		and lc.Approved = @approved
	ORDER BY 
		l.[Name], CreateDate
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]
	@locationId int,
	@text varchar(200),
	@submittedBy varchar(50),
	@approved bit
AS
	Insert INTO {databaseOwner}[{objectQualifier}EngageLocator_Comment] (LocationId, [Text], Author, CreateDate, Approved, ApprovalDate)
	VALUES (@locationId, @text, @submittedBy, getdate(), @approved, getdate())
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetComment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetComment]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetComment]
	@commentId int
AS
	SELECT lc.CommentId, lc.LocationId, lc.[Text], lc.Author, lc.Approved, l.[Name], lc.CreateDate
	FROM 
		{databaseOwner}[{objectQualifier}EngageLocator_Location] l
		join {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc on (l.LocationId = lc.LocationId)
	WHERE 
		CommentId = @commentId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]
	@PortalId [int],
	@LocationTypeId [int],
	@DataType [int],
	@DefaultValue [nvarchar] (255),
	@AttributeName [nvarchar] (255),
	@Required [bit],
	@ValidationExpression [nvarchar] (255),
	@ViewOrder [int],
	@Visible [bit],
	@Length [int]
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	VALUES (@LocationTypeId, @AttributeName, @DataType, @Length, @DefaultValue, @ValidationExpression, @Required, @ViewOrder, @Visible)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]
	@AttributeDefinitionId [int]
AS
	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]
	@AttributeDefinitionId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]
	@LocationTypeId [int],
	@Name [nvarchar] (255)
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.LocationTypeId = @LocationTypeId
	AND lta.AttributeName = @Name
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
	@portalId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.PortalID = @portalId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
	@portalId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.PortalID = @portalId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]
GO


CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]
	@commentId int
AS
	Delete from {databaseOwner}[{objectQualifier}EngageLocator_Comment] where CommentId = @commentId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]
	@locationTypeId int
AS
	SELECT AttributeDefinitionId, AttributeName,DefaultValue, DataType, Length, Required, ViewOrder, Visible FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE LocationTypeId = @locationTypeId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]
	@locationId int
AS
SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
WHERE LocationId = @locationId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]
	@locationAttributeId int,
	@locationId int,
	@attributeValue nvarchar(255)
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] SET AttributeValue = @attributeValue 
	WHERE LocationAttributeId = @locationAttributeId and LocationId = @locationId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]
	@attributeDefinitionId int,
	@locationId int,
	@attributeValue nvarchar(255)
AS
	if not exists (select * from {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] 
		where LocationID = @LocationId and AttributeDefinitionId= @AttributeDefinitionId)
	begin
		Insert into {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] (LocationId, AttributeDefinitionId, AttributeValue, CreateDate, RevisionDate)
		Values (@locationId, @attributeDefinitionId, @attributeValue, getdate(), getdate())
	end
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]

                @AttributeDefinitionId [int],
                @DataType [int],
                @DefaultValue [nvarchar] (255),
                @AttributeName [nvarchar] (255),
                @Required [bit],
                @ValidationExpression [nvarchar] (255),
                @ViewOrder [int],
                @Visible [bit],
                @Length [int]

AS

	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] 

	SET DataType = @DataType,
	DefaultValue = @DefaultValue,
	AttributeName = @AttributeName,
	Required = @Required,
	ValidationExpression = @ValidationExpression,
	ViewOrder = @ViewOrder,
	Visible = @Visible,
	Length = @Length

	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

delete from {databaseOwner}[{objectQualifier}schedule] Where TypeFullName = 'Engage.Dnn.Locator.DataImportScheduler,EngageLocator'
go

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]
GO

CREATE Procedure {databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]
@portalId int
AS

	Delete From {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
	where LocationId in (Select LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId)

	Delete From {databaseOwner}[{objectQualifier}EngageLocator_Comment]
	where LocationId in (Select LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId)

	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId

go

delete from {databaseOwner}[{objectQualifier}ModuleControls] where ControlSrc = 'Desktopmodules/EnageLocator/ZipLocator.ascx'
go

delete from {databaseOwner}[{objectQualifier}ModuleControls] where ControlSrc = 'Desktopmodules/EnageLocator/DataImport.ascx'
go


IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute](
	[LocationAttributeId] [int] IDENTITY(1,1) NOT NULL,	
	[LocationId] [int] NOT NULL,
	[AttributeDefinitionId] [int] NOT NULL,
	[AttributeValue] [nvarchar](255),
	[CreateDate] [datetime] NOT NULL,
	[RevisionDate] [datetime],
	CONSTRAINT [PK_{objectQualifier}EngageLocator_LocationAttribute] PRIMARY KEY CLUSTERED 
	(
		[LocationAttributeId]
	)  ON [PRIMARY] 
)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_LocationAttribute_{objectQualifier}EngageLocator_Location] FOREIGN KEY 
	(
		[LocationId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_Location] (
		[LocationId]
	)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_LocationAttribute_{objectQualifier}EngageLocator_AttributeDefinition] FOREIGN KEY 
	(
		[AttributeDefinitionId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] (
		[AttributeDefinitionId]
	)
GO
