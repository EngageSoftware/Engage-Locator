/***********************************************/
/***                                         ***/
/***        SqlDataProvider 01.03.00         ***/
/***                                         ***/
/***********************************************/

IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE [Name] = 'Approved' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Location]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Location]
 ADD Approved bit
GO

UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Location] set Approved = 1
GO

IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE [Name] = 'Approved' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_TempLocation]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_TempLocation]
 ADD Approved bit
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetEngageLocatorTabModules]
	@portalId int
AS
	SELECT 
		t.Title, m.TabId, m.ModuleTitle, m.ModuleId 
	FROM dbo.[vw_Modules] m 
		JOIN dbo.[ModuleDefinitions] md ON (m.ModuleDefId = md.ModuleDefId)
		JOIN dbo.[Tabs] t ON (m.TabId = t.TabId)
	WHERE 
		t.PortalId = @portalId
		AND m.IsDeleted = 0
		AND t.IsDeleted = 0
		AND t.IsVisible = 1
		AND md.FriendlyName = 'EngageLocator'
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@RegionId int,
	@CountryId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS

	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Location] (ExternalIdentifier, Name, Website, Latitude, Longitude, CountryId, RegionId, City, Address, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CsvLineNumber, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, @PortalId, getdate(), 0, @approved)
	
	SELECT @@Identity
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertTempLocation]
	@ExternalIdentifier nvarchar(255),
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@LocationTypeId int,
	@CsvLineNumber int,
	@PortalId int,
	@successful varchar(25),
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_TempLocation] (ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, [Address], PostalCode, Phone, LocationDetails, LocationTypeId, LastUpdatedDate, CsvLineNumber, PortalId, Successful, Approved)
	VALUES (@ExternalIdentifier, @Name, @Website, @Latitude, @Longitude, @CountryId, @RegionId, @City, @Address, @PostalCode, @Phone, @LocationDetails, @LocationTypeId, getdate(), @CsvLineNumber, @PortalId, @successful, @approved)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spCopyLocation]
AS
INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Location] (ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, Address, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CSVLineNumber, Approved)
SELECT ExternalIdentifier, [Name], Website, Latitude, Longitude, CountryId, RegionId, City, Address, PostalCode, Phone, LocationDetails, LocationTypeId, PortalId, LastUpdatedDate, CSVLineNumber, Approved
FROM {databaseOwner}[{objectQualifier}EngageLocator_TempLocation]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') AND OBJECTPROPERTY(id, N'IsView') = 1)
DROP VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, l.RegionId, 
		country.Text AS CountryName, l.City, l.Address, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] country ON (country.EntryId = l.CountryId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] region ON (region.EntryId = l.RegionId)

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
	@locationId int
AS
	SELECT 
			LocationId, ExternalIdentifier, l.[Name], Latitude, Longitude, City, (select [Text] from {databaseOwner}[{objectQualifier}Lists] where EntryId = l.RegionId) as StateName, l.RegionId, Address, Phone, 
			LocationDetails, LocationTypeId, PostalCode, Website, LocationDetails, Approved
		FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l  
		WHERE LocationId = @locationId 
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationTypeName]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationTypeName]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationType]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationType]
      @LocationTypeId int
AS
      SELECT * FROM {objectQualifier}EngageLocator_LocationType WHERE LocationTypeId = @LocationTypeId
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationTypeCount]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationTypeCount]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationTypeCount]
      @LocationType nvarchar(50)
AS
      
      SELECT Count(*) FROM {databaseOwner}[{objectQualifier}EngageLocator_vLocations] 
      WHERE LocationTypeId = @LocationType
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') AND OBJECTPROPERTY(id, N'IsView') = 1)
DROP VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, 
		country.Text AS CountryName, l.City, l.Address, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId, l.Approved, l.RegionId
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] country on (country.EntryId = l.CountryId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] region on (region.EntryId = l.RegionId)

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsById]
	@LocationTypeId int
AS

	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.LocationTypeId = @LocationTypeId
	ORDER BY lta.ViewOrder 
	
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAllLocations]
	@PortalId int,
	@approved bit,
	@sortColumn nvarchar(200), 
	@index int, 
	@pageSize int
	
AS

	CREATE TABLE #results 
	(
		Id int NOT NULL IDENTITY(1,1),
		LocationId int,
		TotalRecords int
	)

	EXEC('INSERT INTO #results ([LocationId]) SELECT LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_vLocations] WHERE PortalId = ' + @PortalID + ' AND Approved = ' + @approved + ' ORDER BY ' + @sortColumn)

	DECLARE @rows int
	SET @rows = @@RowCount

	UPDATE #results SET TotalRecords = @rows

	IF (@PageSize = 0)
		BEGIN
	 		SELECT r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName AS Country, CountryId, RegionId, City, Address, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			FROM #results r
			JOIN {databaseOwner}[{objectQualifier}EngageLocator_vLocations] e ON (r.LocationId = e.LocationId)
	 	END
	ELSE
	 	BEGIN
	 		SELECT r.LocationId, ExternalIdentifier, Name, WebSite, Abbreviation, StateName, CountryName AS Country, CountryId, RegionId, City, Address, Latitude, Longitude, Phone, LocationDetails, [Type], PostalCode, Approved, r.TotalRecords 
			FROM #results r
			JOIN {databaseOwner}[{objectQualifier}EngageLocator_vLocations] e ON (r.LocationId = e.LocationId)
	 		WHERE id >= @index * @PageSize + 1
	 			AND id < @index * @PageSize + @PageSize + 1
	 	END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocation]
	@LocationId int,
	@ExternalIdentifier nvarchar(255),
	@LocationTypeId int,
	@Name nvarchar(255),
	@Website nvarchar(255),
	@Latitude float,
	@Longitude float,
	@CountryId int,
	@RegionId int,
	@City nvarchar(255),
	@Address nvarchar(255),
	@PostalCode nvarchar(255),
	@Phone nvarchar(255),
	@LocationDetails ntext,
	@PortalId int,
	@LastUpdatedDate datetime,
	@approved bit,
	@Report nvarchar(2000) = '' OUTPUT 	
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Location]
	SET 
		ExternalIdentifier = @ExternalIdentifier, 
		[Name] = @Name, 
		Website = @Website, 
		Latitude = @Latitude, 
		Longitude = @Longitude, 
		CountryId = @CountryId, 
		RegionId = @RegionId, 
		City = @City, 
		Address = @Address, 
		PostalCode = @PostalCode, 
		Phone = @Phone, 
		LocationDetails = @LocationDetails, 
		LocationTypeId = @LocationTypeId, 
		PortalId = @PortalId, 
		LastUpdatedDate = getdate(), 
		CsvLineNumber = 0, 
		approved = @approved
	WHERE 
		LocationId = @LocationId		
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationType]') AND type in (N'U'))
IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE [Name] = 'PortalId' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationType]
ADD [PortalID] [int] NULL
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocTypeAttributes]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocTypeAttributes]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
GO

IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]') AND name = N'PK_{objectQualifier}EngageLocator_AttributeDefinition')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_AttributeDefinition]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition](
	[AttributeDefinitionId] [int] IDENTITY(1,1) NOT NULL,
	[LocationTypeId] [int] NOT NULL,
	[AttributeName] [nvarchar](255),
	[DataType] [int] NULL,
	[Length] [int] NULL,
	[DefaultValue] [ntext],
	[ValidationExpression] [nvarchar],
	[Required] [bit] NOT NULL,
	[ViewOrder] [int] NOT NULL,
	[Visible] [bit] NOT NULL
)

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] WITH NOCHECK ADD 
	CONSTRAINT [PK_{objectQualifier}EngageLocator_AttributeDefinition] PRIMARY KEY  CLUSTERED 
	(
		[AttributeDefinitionId]
	)  ON [PRIMARY] 
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_AttributeDefinition_{objectQualifier}EngageLocator_LocationType] FOREIGN KEY 
	(
		[LocationTypeId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_LocationType] (
		[LocationTypeId]
	)
GO



IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationAttributes]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttributes]
GO



IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}EngageLocator_Comments_{objectQualifier}EngageLocator_Location') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments] DROP CONSTRAINT FK_{objectQualifier}EngageLocator_Comments_{objectQualifier}EngageLocator_Location
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] DROP CONSTRAINT FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comment]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationComments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationComments]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment](
	[CommentId] [int] IDENTITY(1,1) NOT NULL,
	[LocationId] [int] NOT NULL,
	[Text] [ntext] NOT NULL,
	[Author] [nvarchar](50) NULL,
	[CreateDate] [datetime] NOT NULL,
	[Approved] [bit] NOT NULL,
	[ApprovedByUser] [int] NULL,
	[ApprovalDate] [datetime] NULL
) 

IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND name = N'PK_{objectQualifier}EngageLocator_LocationComments')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationComments] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_LocationComments]
GO
IF  EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Comments]') AND name = N'PK_{objectQualifier}EngageLocator_LocationComments')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comments] DROP CONSTRAINT [PK_{objectQualifier}EngageLocator_Comments]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] WITH NOCHECK ADD 
	CONSTRAINT [PK_{objectQualifier}EngageLocator_Comment] PRIMARY KEY  CLUSTERED 
	(
		[CommentId]
	)  ON [PRIMARY] 
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Comment] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_Comment_{objectQualifier}EngageLocator_Location] FOREIGN KEY 
	(
		[LocationId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_Location] (
		[LocationId]
	)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spSaveComment]
	@commentId int,
	@text ntext,
	@submittedBy nvarchar(50),
	@approved bit
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_Comment]
	SET Text = @text, Author = @submittedBy, Approved = @approved
	WHERE CommentId = @commentId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetComments]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetComments]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetComments]
	@locationId int,
	@approved bit
AS
	SELECT lc.CommentId, lc.Text, lc.Author, l.[Name], lc.ApprovalDate
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc
		JOIN {databaseOwner}[{objectQualifier}EngageLocator_Location] l ON (lc.LocationId = l.LocationId)
	WHERE lc.LocationId = @locationId and lc.Approved = @approved
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetNewSubmittedComments]
	@portalId int,
	@approved bit
AS
	SELECT lc.CommentId, lc.LocationId, lc.Text, lc.Author, lc.Approved, l.[Name], lc.CreateDate
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l
		JOIN {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc ON (l.LocationId = lc.LocationId)
	WHERE PortalId = @portalId
		AND lc.Approved = @approved
	ORDER BY l.[Name], CreateDate
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertComment]
	@locationId int,
	@text ntext,
	@submittedBy varchar(50),
	@approved bit
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_Comment] (LocationId, [Text], Author, CreateDate, Approved, ApprovalDate)
	VALUES (@locationId, @text, @submittedBy, getdate(), @approved, getdate())
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetComment]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetComment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetComment]
	@commentId int
AS
	SELECT lc.CommentId, lc.LocationId, lc.[Text], lc.Author, lc.Approved, l.[Name], lc.CreateDate
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l
		JOIN {databaseOwner}[{objectQualifier}EngageLocator_Comment] lc ON (l.LocationId = lc.LocationId)
	WHERE 
		CommentId = @commentId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddAttributeDefinition]
	@PortalId [int],
	@LocationTypeId [int],
	@DataType [int],
	@DefaultValue [ntext],
	@AttributeName [nvarchar] (255),
	@Required [bit],
	@ValidationExpression [nvarchar] (255),
	@ViewOrder [int],
	@Visible [bit],
	@Length [int]
AS
	INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	VALUES (@LocationTypeId, @AttributeName, @DataType, @Length, @DefaultValue, @ValidationExpression, @Required, @ViewOrder, @Visible)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteAttributeDefinition]
	@AttributeDefinitionId [int]
AS
	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
	WHERE AttributeDefinitionId = @AttributeDefinitionId
	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinition]
	@AttributeDefinitionId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionByName]
	@LocationTypeId [int],
	@Name [nvarchar] (255)
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.LocationTypeId = @LocationTypeId
	AND lta.AttributeName = @Name
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
	@portalId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.PortalID = @portalId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetAttributeDefinitionsByPortal]
	@portalId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] lta
	INNER JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] lt ON lt.LocationTypeId = lta.LocationTypeId
	WHERE lt.PortalID = @portalId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteComment]
	@commentId int
AS
	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_Comment]
	WHERE CommentId = @commentId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeDefinitions]
	@locationTypeId int
AS
	SELECT AttributeDefinitionId, AttributeName,DefaultValue, DataType, Length, Required, ViewOrder, Visible FROM {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition]
	WHERE LocationTypeId = @locationTypeId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocationAttributeValues]

	@locationId int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
	WHERE LocationId = @locationId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateLocationAttribute]
	@locationAttributeId int,
	@locationId int,
	@attributeValue ntext
AS
	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
	SET AttributeValue = @attributeValue 
	WHERE LocationAttributeId = @locationAttributeId and LocationId = @locationId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddLocationAttribute]
	@attributeDefinitionId int,
	@locationId int,
	@attributeValue ntext
AS
	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] 
		WHERE LocationID = @LocationId AND AttributeDefinitionId= @AttributeDefinitionId)
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] (LocationId, AttributeDefinitionId, AttributeValue, CreateDate, RevisionDate)
		VALUES (@locationId, @attributeDefinitionId, @attributeValue, getdate(), getdate())
	END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateAttributeDefinition]

                @AttributeDefinitionId [int],
                @DataType [int],
                @DefaultValue [ntext],
                @AttributeName [nvarchar] (255),
                @Required [bit],
                @ValidationExpression [nvarchar] (255),
                @ViewOrder [int],
                @Visible [bit],
                @Length [int]

AS

	UPDATE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] 

	SET DataType = @DataType,
	DefaultValue = @DefaultValue,
	AttributeName = @AttributeName,
	Required = @Required,
	ValidationExpression = @ValidationExpression,
	ViewOrder = @ViewOrder,
	Visible = @Visible,
	Length = @Length

	WHERE AttributeDefinitionId = @AttributeDefinitionId
GO

DELETE FROM {databaseOwner}[{objectQualifier}schedule] WHERE TypeFullName = 'Engage.Dnn.Locator.DataImportScheduler,EngageLocator'
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteLocations]

	@portalId int

AS

	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
	WHERE LocationId IN (SELECT LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId)

	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_Comment]
	WHERE LocationId IN (SELECT LocationId FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId)

	DELETE FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] WHERE PortalId = @portalId
GO

DELETE FROM {databaseOwner}[{objectQualifier}ModuleControls] WHERE ControlSrc = 'DesktopModules/EngageLocator/ZipLocator.ascx'
GO

DELETE FROM {databaseOwner}[{objectQualifier}ModuleControls] WHERE ControlSrc = 'DesktopModules/EngageLocator/DataImport.ascx'
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute](
	[LocationAttributeId] [int] IDENTITY(1,1) NOT NULL,	
	[LocationId] [int] NOT NULL,
	[AttributeDefinitionId] [int] NOT NULL,
	[AttributeValue] [ntext],
	[CreateDate] [datetime] NOT NULL,
	[RevisionDate] [datetime],
	CONSTRAINT [PK_{objectQualifier}EngageLocator_LocationAttribute] PRIMARY KEY CLUSTERED 
	(
		[LocationAttributeId]
	)  ON [PRIMARY] 
)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_LocationAttribute] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_LocationAttribute_{objectQualifier}EngageLocator_Location] FOREIGN KEY 
	(
		[LocationId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_Location] (
		[LocationId]
	)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] ADD 
	CONSTRAINT [FK_{objectQualifier}EngageLocator_LocationAttribute_{objectQualifier}EngageLocator_AttributeDefinition] FOREIGN KEY 
	(
		[AttributeDefinitionId]
	) REFERENCES {databaseOwner}[{objectQualifier}EngageLocator_AttributeDefinition] (
		[AttributeDefinitionId]
	)
GO


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Rating]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EngageLocator_Rating](
	[RatingId] [int] IDENTITY(1,1) NOT NULL,
	[ItemVersionId] [int] NOT NULL,
	[UserId] [int] NULL,
	[Rating] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdated] [datetime] NOT NULL,
 CONSTRAINT [{objectQualifier}PK_EngageLocator_Rating] PRIMARY KEY CLUSTERED 
(
	[RatingId] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Rating]') AND name = N'{objectQualifier}IX_EngageLocator_Rating_CreatedDate')
CREATE NONCLUSTERED INDEX [{objectQualifier}IX_EngageLocator_Rating_CreatedDate] ON {databaseOwner}[{objectQualifier}EngageLocator_Rating] 
(
	[CreatedDate] ASC
) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Rating]') AND name = N'{objectQualifier}IX_EngageLocator_Rating_ItemVersionId')
CREATE NONCLUSTERED INDEX [{objectQualifier}IX_EngageLocator_Rating_ItemVersionId] ON {databaseOwner}[{objectQualifier}EngageLocator_Rating] 
(
	[ItemVersionId] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_FK_Rating_Users]') AND type = 'F')
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Rating]  WITH CHECK ADD  CONSTRAINT [{objectQualifier}EngageLocator_FK_Rating_Users] FOREIGN KEY([UserId])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Rating] CHECK CONSTRAINT [{objectQualifier}EngageLocator_FK_Rating_Users]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_spAddRating]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddRating]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spAddRating]
	@itemVersionId int, 
	@userId int, 
	@rating int = 0
AS
BEGIN
	INSERT INTO [{objectQualifier}EngageLocator_Rating] (ItemVersionId, UserId, Rating, CreatedDate, LastUpdated)
	VALUES (@itemVersionId, @userId, @rating, getdate(), getdate())

	SELECT @@IDENTITY
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetRatingByUserForItemVersion]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetRatingByUserForItemVersion]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetRatingByUserForItemVersion]
	@itemVersionId int, 
	@userId int
AS
BEGIN
	SELECT r.RatingId, r.Rating, r.UserId, r.ItemVersionId, r.LastUpdated, r.CreatedDate
	FROM [{objectQualifier}EngageLocator_Rating] r
	WHERE r.userId = @userId
	 AND r.ItemVersionId = @itemVersionId
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateRatingByUserForItemVersion]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateRatingByUserForItemVersion]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateRatingByUserForItemVersion]
	@itemVersionId int, 
	@userId int,
	@rating int
AS
BEGIN
	UPDATE [{objectQualifier}EngageLocator_Rating]
	SET Rating = @rating,
		LastUpdated = getdate()
	WHERE RatingId = (SELECT top 1 RatingId 
						from [{objectQualifier}EngageLocator_Rating] r 
						where r.UserId = @userId
						and r.ItemVersionId = @itemVersionId)
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_spUpdateRating]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateRating]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spUpdateRating]
	@ratingId int, 
	@rating int
AS
BEGIN
	UPDATE [{objectQualifier}EngageLocator_Rating]
	SET Rating = @rating,
		LastUpdated = getdate()
	WHERE RatingId = @ratingId
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_spDeleteRatings]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteRatings]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spDeleteRatings]
	@itemVersionId int
AS
BEGIN
	DELETE [{objectQualifier}EngageLocator_Rating]
	WHERE itemVersionId = @itemVersionId
END
GO
  
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_vLocations]') AND OBJECTPROPERTY(id, N'IsView') = 1)
DROP VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}EngageLocator_vLocations]
AS
	SELECT l.LocationId, l.LocationTypeId, l.ExternalIdentifier, l.Name, l.Website, l.Latitude, l.Longitude, 
		country.Text AS CountryName, l.City, l.Address, l.PostalCode, l.Phone, l.LocationDetails, l.PortalId, l.LastUpdatedDate, 
		p.LocationTypeName AS [Type], region.Text AS StateName, region.Value as Abbreviation,
		l.CountryId, l.Approved, l.RegionId,
		(select avg(convert(FLOAT, Rating)) from {databaseOwner}[{objectQualifier}EngageLocator_Rating] where itemVersionId = l.locationId) as AverageRating
	FROM {databaseOwner}[{objectQualifier}EngageLocator_Location] l WITH (NOLOCK) 
	JOIN {databaseOwner}[{objectQualifier}EngageLocator_LocationType] AS p ON (l.LocationTypeId = p.LocationTypeId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] country on (country.EntryId = l.CountryId)
	LEFT JOIN {databaseOwner}[{objectQualifier}Lists] region on (region.EntryId = l.RegionId)

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spGetLocation]
	@locationId int
AS
	SELECT 
			LocationId, ExternalIdentifier, l.[Name], Latitude, Longitude, City, (select [Text] from {databaseOwner}[{objectQualifier}Lists] where EntryId = l.RegionId) as StateName, l.RegionId, Address, Phone, 
			LocationDetails, LocationTypeId, PostalCode, Website, LocationDetails, Approved, AverageRating
		FROM {databaseOwner}[{objectQualifier}EngageLocator_vLocations] l  
		WHERE LocationId = @locationId 
GO

IF EXISTS (SELECT sc.Name, so.Name FROM dbo.syscolumns sc join dbo.sysObjects so on (so.Id = sc.Id)
	where sc.xusertype = '99' and so.xtype = 'u' AND so.id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_Location]') and sc.Name = 'LocationDetails')
begin
	ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_Location] ALTER COLUMN LocationDetails [ntext]
end
GO

IF EXISTS (SELECT sc.Name, so.Name FROM dbo.syscolumns sc join dbo.sysObjects so on (so.Id = sc.Id)
	where sc.xusertype = '99' and so.xtype = 'u' AND so.id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EngageLocator_TempLocation]') and sc.Name = 'LocationDetails')
begin
	ALTER TABLE {databaseOwner}[{objectQualifier}EngageLocator_TempLocation] ALTER COLUMN LocationDetails [ntext]
end
GO

if not exists(select * from {databaseOwner}[{objectQualifier}Schedule] where TypeFullname = 'Engage.Dnn.Locator.Components.DataImportScheduler')
begin
	INSERT INTO {databaseOwner}[{objectQualifier}Schedule] 
	([TypeFullName] ,[TimeLapse] ,[TimeLapseMeasurement],[RetryTimeLapse],[RetryTimeLapseMeasurement],[RetainHistoryNum],[AttachToEvent],[CatchUpEnabled],[Enabled],[ObjectDependencies] ,[Servers])
	VALUES ('Engage.Dnn.Locator.Components.DataImportScheduler,EngageLocator', 15, 'm', 60,'s', 25, 'APPLICATION_START', 1,	1, '', NULL)
end
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EngageLocator_spInsertFileInfo]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertFileInfo]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EngageLocator_spInsertFileInfo]
	@FileId int, 
	@UserId int,
	@TabModuleId int, 
	@PortalId int, 
	@UploadDate datetime, 
	@Succeeded bit, 
	@Processed bit

AS
	declare @id int
	
	SELECT @id = FileId FROM {databaseOwner}[{objectQualifier}EngageLocator_Files] where FileId = @FileId

	if (@id is null)
	begin
		--print 'Insert'
		Insert into {databaseOwner}[{objectQualifier}EngageLocator_Files] (FileId, UserId, TabModuleId, PortalId, UploadDate, Succeeded, Processed)
		Values (@FileId, @UserId, @TabModuleId,  @PortalId, @UploadDate, @Succeeded, @Processed)	
	end
	
GO

